--[[
    init.lua
    Created: 08/17/2025 17:14:01
    Description: Autogenerated script file for the map apple_forest.
]]--
-- Commonly included lua functions and data
require 'origin.common'

-- Package name
local apple_forest = {}

-------------------------------
-- Zone Callbacks
-------------------------------
---apple_forest.Init(zone)
--Engine callback function
function apple_forest.Init(zone)
    GAME:SetCanSwitch(true)
end

---apple_forest.EnterSegment(zone, rescuing, segmentID, mapID)
--Engine callback function
function apple_forest.EnterSegment(zone, rescuing, segmentID, mapID)


end

---apple_forest.ExitSegment(zone, result, rescue, segmentID, mapID)
--Engine callback function
function apple_forest.ExitSegment(zone, result, rescue, segmentID, mapID)
  DEBUG.EnableDbgCoro() --Enable debugging this coroutine
  PrintInfo("=>> ExitSegment result "..tostring(result).." segment "..tostring(segmentID))

  --first check for rescue flag; if we're in rescue mode then take a different path
  local exited = COMMON.ExitDungeonMissionCheck(result, rescue, zone.ID, segmentID) --check if we cleared while doing a rescue
    if exited == true then
        --do nothing; this is a dummy branch to stop us from going through the other branches
    elseif result ~= RogueEssence.Data.GameProgress.ResultType.Cleared then -- resolves true if the dungeon was not cleared
        --end the dungeon day by sending the player back to their last checkpoint, since they didn't clear the dungeon
         COMMON.EndDungeonDay(result, SV.checkpoint.Zone, SV.checkpoint.Segment, SV.checkpoint.Map, SV.checkpoint.Entry)
    else -- we didn't resolve true for being in rescue or losing the dungeon, so we must have cleared the dungeon
         -- now we will check what segment we took, so we can make the game do what we want to depending on the segment
        if segmentID == 0 then
            COMMON.EndDungeonDay(result, "apple_forest", -1, 0, 0)
        else -- this is a fallback branch, in case we went through all of the branches and hit nothing (which should not happen!)
            PrintInfo("No exit procedure found!")
            -- just send the player to their last checkpoint
            DUN_failure = true
	        COMMON.EndDungeonDay(result, SV.checkpoint.Zone, SV.checkpoint.Segment, SV.checkpoint.Map, SV.checkpoint.Entry)
        end
    end
end

---apple_forest.Rescued(zone, name, mail)
--Engine callback function
function apple_forest.Rescued(zone, name, mail)


end

return apple_forest

